#!/bin/bash

usage="Usage: setupTestEnvLocal [--help] [ [--cicd] | [--local] ]"
cicd=false

# Based on https://stackoverflow.com/a/33826763/11827673
while [[ "$#" -gt 0 ]]; do
  case $1 in
    -h|--help)   echo "$usage"; exit ;;
    -c|--cicd)   cicd=true   ;;
    -l|--local)  cicd=false  ;;
    *) echo "Unknown parameter passed: $1"; echo "$usage"; exit 1 ;;
  esac
  shift
done

# load version and jars
# setup jars, dependencies and version

./gradlew clean
touch version_temp.yaml

prefix=`./utils/project-prefix`

# add new line char at the end in case it's not there for looping
echo  >> modules.txt

# looping
cat modules.txt | while read line
do
	if [[ ! -z "$line" ]] && [[ $line != //* ]]
	then
		while IFS=',' read -ra ADDR; do
			counter=0
      		for i in "${ADDR[@]}"; do
      			if [ $counter == 0 ]
      			then
      				repo_name="$i"
          		fi
          		counter=$(($counter+1))
      		done
 		done <<< "$line"
 		
 		dir_name=$prefix-$repo_name

 		if [[ $repo_name != "sqlite-plugin" ]]
        then
            # build
            echo ""
            echo "Building $dir_name..."
            (cd $dir_name/ && ./runBuild noJarFolderChange)
 		fi
 		
 		# move jars to relevant place for testing

 		if [[ $dir_name = *"-core" ]]
 		then
 		    (cd $dir_name/cli/ && ./runBuild noJarFolderChange)
 		    (cd $dir_name/downloader/ && ./runBuild noJarFolderChange)
 		    (cd $dir_name/ee/ && ./runBuild noJarFolderChange)
 			mkdir core > /dev/null 2>&1
 			cp $dir_name/build/libs/* core
 			if [[ $cicd = false ]]; then
 			  cp $dir_name/build/dependencies/* core > /dev/null 2>&1
 			fi
 			
 			# add to version_temp.yaml
 			core_version=`cat $dir_name/build.gradle | grep -e "version =" -e "version="`
 			while IFS='"' read -ra ADDR; do
				counter=0
				for i in "${ADDR[@]}"; do
					if [ $counter == 1 ]
					then
						core_version=$i
			  		fi
			  		counter=$(($counter+1))
				done
			done <<< "$core_version"
			echo "core_version: $core_version" >> version_temp.yaml

            if [[ $cicd = true ]]; then
              curl -X GET \
                  "https://api.supertokens.io/core/dependency/jars?version=$core_version&planType=FREE&mode=DEV&withSource=false" \
                  -H 'api-version: 0' | jq '.links' | jq -c '.[]' | while read i; do \
                  wget -P core/ `echo $i | sed -e 's/^"//' -e 's/"$//'`; done
            fi
            mkdir cli > /dev/null 2>&1
            cp $dir_name/cli/build/libs/* cli
            if [[ $cicd = true ]]; then
              curl -X GET \
                  "https://api.supertokens.io/cli/dependency/jars?version=$core_version&planType=FREE&mode=DEV
                  &withSource=false" \
                  -H 'api-version: 0' | jq '.links' | jq -c '.[]' | while read i; do \
                  wget -P cli/ `echo $i | sed -e 's/^"//' -e 's/"$//'`; done
            else
              cp $dir_name/cli/build/dependencies/* cli > /dev/null 2>&1
            fi

            mkdir downloader > /dev/null 2>&1
            cp $dir_name/downloader/build/libs/* downloader

            mkdir ee > /dev/null 2>&1
            cp $dir_name/ee/build/libs/* ee

            cp $dir_name/install install
            cp $dir_name/install.bat install.bat

			cp $dir_name/LICENSE.md LICENSE.md
 		elif [[ $dir_name = *"-plugin-interface" ]]
 		then
 			mkdir plugin-interface > /dev/null 2>&1
 			cp $dir_name/build/libs/* plugin-interface
 			if [[ $cicd = false ]]; then
 			  cp $dir_name/build/dependencies/* plugin-interface > /dev/null 2>&1
      fi
 			
 			# add to version_temp.yaml
 			pi_version=`cat $dir_name/build.gradle | grep -e "version =" -e "version="`
 			while IFS='"' read -ra ADDR; do
				counter=0
				for i in "${ADDR[@]}"; do
					if [ $counter == 1 ]
					then
						pi_version=$i
			  		fi
			  		counter=$(($counter+1))
				done
			done <<< "$pi_version"
			echo "plugin_interface_version: $pi_version" >> version_temp.yaml
			
			if [[ $cicd = true ]]; then
			  curl -X GET \
          "https://api.supertokens.io/plugin-interface/dependency/jars?version=$pi_version&planType=FREE&mode=DEV&withSource=false" \
          -H 'api-version: 0' | jq '.links' | jq -c '.[]' | while read i; do \
          wget -P plugin-interface/ `echo $i | sed -e 's/^"//' -e 's/"$//'`; done
      fi
			
 		elif [[ $repo_name != "sqlite-plugin" ]]
 		then
 			mkdir plugin > /dev/null 2>&1
 			cp $dir_name/build/libs/* plugin
 			if [[ $cicd = false ]]; then
 			  cp $dir_name/build/dependencies/* plugin > /dev/null 2>&1
 			fi
 			
 			
 			# add to version_temp.yaml
 			p_version=`cat $dir_name/build.gradle | grep -e "version =" -e "version="`
 			while IFS='"' read -ra ADDR; do
				counter=0
				for i in "${ADDR[@]}"; do
					if [ $counter == 1 ]
					then
						p_version=$i
			  		fi
			  		counter=$(($counter+1))
				done
			done <<< "$p_version"
			p_name=`cat $dir_name/build.gradle | grep -e "def pluginName =" -e "def pluginName="`
 			while IFS='"' read -ra ADDR; do
				counter=0
				for i in "${ADDR[@]}"; do
					if [ $counter == 1 ]
					then
						p_name=$i
			  		fi
			  		counter=$(($counter+1))
				done
			done <<< "$p_name"
			echo "plugin_version: $p_version" >> version_temp.yaml
			echo "plugin_name: $p_name" >> version_temp.yaml
			if [[ $cicd = true ]]; then
			  curl -X GET \
          "https://api.supertokens.io/plugin/dependency/jars?version=$p_version&name=$p_name&planType=FREE&mode=DEV&withSource=false" \
          -H 'api-version: 0' | jq '.links' | jq -c '.[]' | while read i; do \
          wget -P plugin/ `echo $i | sed -e 's/^"//' -e 's/"$//'`; done
      fi
		else
		    mkdir plugin > /dev/null 2>&1
 		fi
 		
   	fi
done

# remove new line char from end for next use of this script
printf %s "$(< modules.txt)" > modules.txt

mv version_temp.yaml version.yaml


# fetch default license key and config
./utils/createConfigFileForTesting
mkdir temp
cp config.yaml temp/config.yaml
rm config.yaml
touch .testEnvRunning